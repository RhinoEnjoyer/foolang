#pragma once
#include "token_codes.hpp"
#include <string>
#include <iostream>
static std::string token_code_print(size_t type){
  switch(type){
  case NULLTKN: return "NULLTKN"; break;
  case WS: return "WS"; break;
  case HEX: return "HEX"; break;
  case BIN: return "BIN"; break;
  case ID: return "ID"; break;
  case STRLIT: return "STRLIT"; break;
  case INT: return "INT"; break;
  case TONE_INT: return "TONE_INT"; break;
  case FLOAT: return "FLOAT"; break;
  case ASIGN: return "ASIGN"; break;
  case PLUS: return "PLUS"; break;
  case MINUS: return "MINUS"; break;
  case MULT: return "MULT"; break;
  case DIV: return "DIV"; break;
  case MOD: return "MOD"; break;
  case POINTER: return "POINTER"; break;
  case DEREF: return "DEREF"; break;
  case AND: return "AND"; break;
  case OR: return "OR"; break;
  case XOR: return "XOR"; break;
  case NOT: return "NOT"; break;
  case SHIFTL: return "SHIFTL"; break;
  case SHIFTR: return "SHIFTR"; break;
  case EQUAL: return "EQUAL"; break;
  case NEQUAL: return "NEQUAL"; break;
  case GREATER: return "GREATER"; break;
  case GEQUAL: return "GEQUAL"; break;
  case LESS: return "LESS"; break;
  case LEQUAL: return "LEQUAL"; break;
  case LPAREN: return "LPAREN"; break;
  case RPAREN: return "RPAREN"; break;
  case LBRACE: return "LBRACE"; break;
  case RBRACE: return "RBRACE"; break;
  case LCBRACE: return "LCBRACE"; break;
  case RCBRACE: return "RCBRACE"; break;
  case TONE: return "TONE"; break;
  case DOT: return "DOT"; break;
  case COLON: return "COLON"; break;
  case SEMICOLON: return "SEMICOLON"; break;
  case COMMA: return "COMMA"; break;
  case BUILTIN: return "BUILTIN"; break;
  case TEMPLATE: return "TEMPLATE"; break;
  case COMMENT: return "COMMENT"; break;
  case OTHER: return "OTHER"; break;
  case VALUE: return "VALUE"; break;
  case IMPORT: return "IMPORT"; break;
  case TRUE: return "TRUE"; break;
  case FALSE: return "FALSE"; break;
  case FOR: return "FOR"; break;
  case IF: return "IF"; break;
  case ELSE: return "ELSE"; break;
  case ELIF: return "ELIF"; break;
  case SIZEOF: return "SIZEOF"; break;
  case TYPEOF: return "TYPEOF"; break;
  case OFFSETOF: return "OFFSETOF"; break;
  case FN: return "FN"; break;
  case REC: return "REC"; break;
  case UNION: return "UNION"; break;
  case ENUM: return "ENUM"; break;
  case STMT: return "STMT"; break;
  case STMT_LIST: return "STMT_LIST"; break;
  case IF_STMT: return "IF_STMT"; break;
  case ELIF_STMT: return "ELIF_STMT"; break;
  case ELSE_STMT: return "ELSE_STMT"; break;
  case IF_CHAIN_STMT: return "IF_CHAIN_STMT"; break;
  case IF_COND: return "IF_COND"; break;
  case VAR_DECL_STMT: return "VAR_DECL_STMT"; break;
  case RET: return "RET"; break;
  case ALIAS: return "ALIAS"; break;
  case NULLPTR: return "NULLPTR"; break;
  case ERROR: return "ERROR"; break;
  case UNIT: return "UNIT"; break;
  case EXT_DECL: return "EXT_DECL"; break;
  case TYPE: return "TYPE"; break;
  case BASE_TYPE: return "BASE_TYPE"; break;
  case USER_TYPE: return "USER_TYPE"; break;
  case BOOL: return "BOOL"; break;
  case S8: return "S8"; break;
  case S16: return "S16"; break;
  case S32: return "S32"; break;
  case S64: return "S64"; break;
  case S128: return "S128"; break;
  case U8: return "U8"; break;
  case U16: return "U16"; break;
  case U32: return "U32"; break;
  case U64: return "U64"; break;
  case U128: return "U128"; break;
  case F16: return "F16"; break;
  case F32: return "F32"; break;
  case F64: return "F64"; break;
  case F128: return "F128"; break;
  case CBRACES: return "CBRACES"; break;
  case PARENS: return "PARENS"; break;
  case EMPTY: return "EMPTY"; break;
  case ID_DECL: return "ID_DECL"; break;
  case ID_LIST: return "ID_LIST"; break;
  case UN_OP: return "UN_OP"; break;
  case UN_OP_EXPR: return "UN_OP_EXPR"; break;
  case NASSOC_OP: return "NASSOC_OP"; break;
  case RIGHT_OP: return "RIGHT_OP"; break;
  case LEFT_OP: return "LEFT_OP"; break;
  case EMPTY_LIST: return "EMPTY_LIST"; break;
  case INIT_LIST: return "INIT_LIST"; break;
  case EMPTY_GROUP: return "EMPTY_GROUP"; break;
  case SEMI_LIST: return "SEMI_LIST"; break;
  case COMMA_LIST: return "COMMA_LIST"; break;
  case DECL_PREFIX: return "DECL_PREFIX"; break;
  case DECL: return "DECL"; break;
  case LIST: return "LIST"; break;
  case LITERAL: return "LITERAL"; break;
  case EXT_DECL_TYPE: return "EXT_DECL_TYPE"; break;
  case ASIGN_STMT: return "ASIGN_STMT"; break;
  case FN_DECL: return "FN_DECL"; break;
  case FN_PROTO: return "FN_PROTO"; break;
  case FN_CALL: return "FN_CALL"; break;
  case NAMESPACE: return "NAMESPACE"; break;
  case REC_DECL: return "REC_DECL"; break;
  case ENUM_DECL: return "ENUM_DECL"; break;
  case UNION_DECL: return "UNION_DECL"; break;
  case FN_TYPE: return "FN_TYPE"; break;
  case REC_TYPE: return "REC_TYPE"; break;
  case ENUM_TYPE: return "ENUM_TYPE"; break;
  case UNION_TYPE: return "UNION_TYPE"; break;
  case FN_ARGS_RETS: return "FN_ARGS_RETS"; break;
  case ARGS: return "ARGS"; break;
  case RETS: return "RETS"; break;
  case LVALUE: return "LVALUE"; break;
  case RVALUE: return "RVALUE"; break;
  case VAR_DECL: return "VAR_DECL"; break;
  case CAST: return "CAST"; break;
  case AS: return "AS"; break;
  case MEMBER: return "MEMBER"; break;
  case WRAP: return "WRAP"; break;
  case GROUP: return "GROUP"; break;
  case EXPR: return "EXPR"; break;
  case EXPR_STMT: return "EXPR_STMT"; break;
  case COMP_STMT: return "COMP_STMT"; break;
  case TEST: return "TEST"; break;
  default: return "Unknown token"; break;
  }
}